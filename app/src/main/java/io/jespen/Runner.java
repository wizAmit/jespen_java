/*
 * This source file was generated by the Gradle 'init' task
 */
package io.jespen;

import java.io.IOException;
import java.util.Scanner;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.function.BiConsumer;

import com.eclipsesource.json.JsonObject;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;

import io.jespen.bulider.NodeBuilder;
import io.jespen.lib.*;
import io.jespen.lib.handlers.EchoNode;
import io.jespen.lib.handlers.MessageHandler;
import io.jespen.lib.handlers.Node;
import io.jespen.lib.handlers.NodeHandlers;

public class Runner {

    static BiConsumer<Message, Throwable> outConsumer = (message,ex) -> {
        JsonObject res = new JsonObject()
                .add("src", message.headers().dest())
                .add("dest", message.headers().src())
                .add("body", message.payload().getJsonObject());
        System.out.println(res.toString());
    };

    public static void main(String[] args) throws IOException {

        try (Scanner scanner = new Scanner(System.in);) {
            String nodeInitReq = scanner.nextLine();
            final NodeBuilder.TwoPartBuilder builder = new NodeBuilder.TwoPartBuilder();
            CompletableFuture<NodeBuilder.TwoPartBuilder> initMessage = CompletableFuture.supplyAsync(
                                                                () -> builder.initTwoPartBuilder(new ReqBuilder(nodeInitReq).build(),
                                                                        NodeHandlers.Echo) );

            initMessage.thenApply(builder::handle)
//                    .thenApply()
                    .whenComplete(outConsumer).join();
            final MessageHandler messageHandler = builder.getNodeHandler();
            
            while (scanner.hasNext()) {
                String line = scanner.nextLine();
                CompletableFuture<Message> resFuture = CompletableFuture
                        .supplyAsync(() -> new ReqBuilder(line).build());

//                System.out.println("here");

                resFuture.thenApply(messageHandler::handle)
                        .whenComplete(outConsumer)
                        .join();
                
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
