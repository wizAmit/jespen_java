/*
 * This source file was generated by the Gradle 'init' task
 */
package io.jespen;

import java.util.Scanner;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;

import io.jespen.lib.EchoReqPd;
import io.jespen.lib.EchoRes;
import io.jespen.lib.Headers;
import io.jespen.lib.Message;
import io.jespen.lib.ReqBuilder;
import io.jespen.lib.ResBuilder;
import io.jespen.lib.ResSerializer;
import io.jespen.lib.MsgType;
import io.jespen.lib.handlers.EchoNode;
import io.jespen.lib.handlers.InitNode;
import io.jespen.lib.handlers.MessageHandler;

public class Runner {

    public static void main(String[] args) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addSerializer(Message.class, new ResSerializer());
        objectMapper.registerModule(module);

        MessageHandler echoNode = new EchoNode();
        MessageHandler initNode = new InitNode();

        Executor executor = Executors.newVirtualThreadPerTaskExecutor();

        try (final Scanner scanner = new Scanner(System.in);) {
            while (scanner.hasNext()) {
                final String inp = scanner.nextLine();
                final Message echoReq = new ReqBuilder(inp).build();
                Message echoRes = echoReq.msgType().equals(MsgType.echo) ? executor.execute(() -> echoNode.handle(echoReq))
                        : executor.execute(() -> initNode.handle(echoReq));
                System.out.println(objectMapper.writeValueAsString(echoRes));
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

}
