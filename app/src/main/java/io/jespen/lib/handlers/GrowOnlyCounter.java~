package io.jespen.lib.handlers;

import io.jespen.lib.*;
import io.jespen.lib.rpc.SelectorCli;

import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ThreadFactory;
import java.util.stream.Collectors;

public class GrowOnlyCounter extends NodeV2 {
    protected ConcurrentHashMap<Integer, Boolean> initialValue = new ConcurrentHashMap<>();
    protected Gossip gossip;

    static ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1, new ThreadFactory() {
        @Override
        public Thread newThread(Runnable r) {
            Thread thread = new Thread(r);
            thread.setDaemon(true);
            return thread;
        }
    });

    public GrowOnlyCounter() {
        super();
        this.topology = Optional.of(new ConcurrentHashMap<>());
    }

    @Override
    public Message handle(Message message) {
        System.err.println("Handling " + message);

        if (message.msgType().equals(MsgType.add)) {
            this.initialValue.putIfAbsent(((AddReqPd) message.payload()).delta(),false);

            return new Message(MsgType.add_ok,
                    reverseHeaders.apply(message),
                    new AddRes());
        } else if (message.msgType().equals(MsgType.read)) {
            Integer value = this.initialValue.keySet().stream().reduce((a, b) -> a + b).orElse(0);

            return new Message(MsgType.read_ok,
                    reverseHeaders.apply(message),
                    new RpcReadRes(value));
        } else if (message.msgType().equals(MsgType.topology)) {
            this.topology.get().put(nodeId, ((TopologyReqPd) message.payload()).topology().get(nodeId));

            SelectorCli selectorCli = SelectorCli.start(this);
            return new Message(MsgType.topology_ok,
                    reverseHeaders.apply(message),
                    new TopologyRes((TopologyReqPd) message.payload(), msgId.incrementAndGet()));
        } else if (message.msgType().equals(MsgType.init)) {
//            this.gossip = new Gossip(null, null, this.topology.get());
            SelectorCli selectorCli = SelectorCli.start(this);
            return handleInit(message);
        } else {
            return this.handleRpc(message).orElseGet(() -> null);
        }
    }

    @Override
    public Optional<Payload> getRpcPayload(String neighbor) {
        return Optional.of(new GossipReqPd(this.msgId.incrementAndGet(),
                this.initialValue.keySet().stream().collect(Collectors.toList())));
    }

    @Override
    public Optional<Message> handleRpc(Message message) {
        ((GossipReqPd) message.payload()).known2other().forEach(i -> this.initialValue.putIfAbsent(i, false));
        return Optional.empty();
    }
}
